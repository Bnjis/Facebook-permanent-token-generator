{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","app_id","app_secret","user_access_token","permanent_token","isError","handleChangeApp_id","bind","assertThisInitialized","handleChangeApp_secret","handleChangeToken","handleSubmit","event","setState","target","value","_this2","_this$state","alert","preventDefault","API_URL","obj","id","token","self","axios","get","then","response","data","access_token","catch","error","console","log","message","_this$state2","react_default","a","createElement","className","onSubmit","htmlFor","type","onChange","Component","App","href","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","src_components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa174379.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Form.scss\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      app_id: \"\",\r\n      app_secret: \"\",\r\n      user_access_token: \"\",\r\n      permanent_token: \"\",\r\n      isError: \"\"\r\n    };\r\n\r\n    this.handleChangeApp_id = this.handleChangeApp_id.bind(this);\r\n    this.handleChangeApp_secret = this.handleChangeApp_secret.bind(this);\r\n    this.handleChangeToken = this.handleChangeToken.bind(this);\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChangeApp_id(event) {\r\n    this.setState({ app_id: event.target.value });\r\n  }\r\n\r\n  handleChangeApp_secret(event) {\r\n    this.setState({ app_secret: event.target.value });\r\n  }\r\n\r\n  handleChangeToken(event) {\r\n    this.setState({ user_access_token: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    const { app_id, app_secret, user_access_token } = this.state;\r\n\r\n    if (!app_id || !app_secret || !user_access_token) {\r\n      alert(\"Please complete all fields\");\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    const API_URL = \"https://graph.facebook.com/v3.2\";\r\n\r\n    let obj = { id: \"\", token: \"\" };\r\n    var self = this;\r\n    axios\r\n      .get(\r\n        API_URL +\r\n          \"/oauth/access_token?grant_type=fb_exchange_token&client_id=\" +\r\n          app_id +\r\n          \"&client_secret=\" +\r\n          app_secret +\r\n          \"&fb_exchange_token=\" +\r\n          user_access_token\r\n      )\r\n      .then(response => {\r\n        obj.token = response.data.access_token;\r\n        return obj;\r\n      })\r\n      .then(obj => {\r\n        axios\r\n          .get(API_URL + \"/me?access_token=\" + obj.token)\r\n          .then(response => {\r\n            obj.id = response.data.id;\r\n            return obj;\r\n          })\r\n          .then(obj => {\r\n            axios\r\n              .get(\r\n                API_URL + \"/\" + obj.id + \"/accounts?access_token=\" + obj.token\r\n              )\r\n              .then(response => {\r\n                this.setState({\r\n                  permanent_token: response.data.data[0].access_token\r\n                });\r\n              })\r\n              .catch(error => {\r\n                console.log(error);\r\n                self.setState({ isError: error.response.data.error.message });\r\n              });\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n            self.setState({ isError: error.response.data.error.message });\r\n          });\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error.response);\r\n        self.setState({ isError: error.response.data.error.message });\r\n      });\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { permanent_token, isError } = this.state;\r\n    return (\r\n      <div className=\"form-wrapper\">\r\n        <h1>Facebook PermaToken Generator</h1>\r\n        <p className=\"description\">\r\n          Complete the following fields to get your permanent token. The\r\n          documentation is available on GitHub via the link at the top right\r\n        </p>\r\n        <form onSubmit={this.handleSubmit} className=\"access_form\">\r\n          <label htmlFor=\"app_id\">\r\n            App ID\r\n            <input\r\n              type=\"text\"\r\n              id=\"app_id\"\r\n              value={this.state.app_id}\r\n              onChange={this.handleChangeApp_id}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"app_secret\">\r\n            App Secret\r\n            <input\r\n              type=\"text\"\r\n              id=\"app_secret\"\r\n              value={this.state.app_secret}\r\n              onChange={this.handleChangeApp_secret}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"user_token\">\r\n            User Acess Token\r\n            <input\r\n              type=\"text\"\r\n              id=\"user_token\"\r\n              value={this.state.user_access_token}\r\n              onChange={this.handleChangeToken}\r\n            />\r\n          </label>\r\n          <button>Submit</button>\r\n        </form>\r\n        {isError !== \"\" ? (\r\n          <div className=\"response error\">\r\n            An error has occured : <strong>{isError}</strong>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {permanent_token !== \"\" ? (\r\n          <div className=\"response valide\">\r\n            Your permanent token is : <strong>{permanent_token}</strong>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport Form from \"./components/Form\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <a\n          href=\"https://github.com/Bnjis/Facebook-permanent-token-generator\"\n          className=\"github-corner\"\n          aria-label=\"View source on GitHub\"\n        >\n          <svg\n            width=\"80\"\n            height=\"80\"\n            viewBox=\"0 0 250 250\"\n            style={{\n              fill: \"#151513\",\n              color: \"#fff\",\n              position: \"absolute\",\n              top: 0,\n              border: 0,\n              right: 0\n            }}\n            aria-hidden=\"true\"\n          >\n            <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n            <path\n              d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n              fill=\"currentColor\"\n              style={{ transformOrigin: \"130px 106px\" }}\n              className=\"octo-arm\"\n            />\n            <path\n              d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n              fill=\"currentColor\"\n              className=\"octo-body\"\n            />\n          </svg>\n        </a>\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}