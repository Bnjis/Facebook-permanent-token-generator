{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","app_id","app_secret","user_access_token","permanent_token","handleChangeApp_id","bind","assertThisInitialized","handleChangeApp_secret","handleChangeToken","handleSubmit","event","setState","target","value","_this2","_this$state","API_URL","obj","id","token","axios","get","then","response","data","access_token","catch","error","console","log","preventDefault","react_default","a","createElement","className","onSubmit","htmlFor","type","onChange","Component","App","src_components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b40707f1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Form.scss\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      app_id: \"\",\r\n      app_secret: \"\",\r\n      user_access_token: \"\",\r\n      permanent_token: \"\"\r\n    };\r\n\r\n    this.handleChangeApp_id = this.handleChangeApp_id.bind(this);\r\n    this.handleChangeApp_secret = this.handleChangeApp_secret.bind(this);\r\n    this.handleChangeToken = this.handleChangeToken.bind(this);\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChangeApp_id(event) {\r\n    this.setState({ app_id: event.target.value });\r\n  }\r\n\r\n  handleChangeApp_secret(event) {\r\n    this.setState({ app_secret: event.target.value });\r\n  }\r\n\r\n  handleChangeToken(event) {\r\n    this.setState({ user_access_token: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    const { app_id, app_secret, user_access_token } = this.state;\r\n    const API_URL = \"https://graph.facebook.com/v3.2\";\r\n\r\n    let obj = { id: \"\", token: \"\" };\r\n    axios\r\n      .get(\r\n        API_URL +\r\n          \"/oauth/access_token?grant_type=fb_exchange_token&client_id=\" +\r\n          app_id +\r\n          \"&client_secret=\" +\r\n          app_secret +\r\n          \"&fb_exchange_token=\" +\r\n          user_access_token\r\n      )\r\n      .then(response => {\r\n        obj.token = response.data.access_token;\r\n        return obj;\r\n      })\r\n      .then(obj => {\r\n        axios\r\n          .get(API_URL + \"/me?access_token=\" + obj.token)\r\n          .then(response => {\r\n            obj.id = response.data.id;\r\n            return obj;\r\n          })\r\n          .then(obj => {\r\n            axios\r\n              .get(\r\n                API_URL + \"/\" + obj.id + \"/accounts?access_token=\" + obj.token\r\n              )\r\n              .then(response => {\r\n                this.setState({\r\n                  permanent_token: response.data.data[0].access_token\r\n                });\r\n              })\r\n              .catch(error => {\r\n                console.log(error);\r\n              });\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { permanent_token } = this.state;\r\n    return (\r\n      <div className=\"form-wrapper\">\r\n        <form onSubmit={this.handleSubmit} className=\"access_form\">\r\n          <label htmlFor=\"app_id\">\r\n            App ID\r\n            <input\r\n              type=\"text\"\r\n              id=\"app_id\"\r\n              value={this.state.app_id}\r\n              onChange={this.handleChangeApp_id}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"app_secret\">\r\n            App Secret\r\n            <input\r\n              type=\"text\"\r\n              id=\"app_secret\"\r\n              value={this.state.app_secret}\r\n              onChange={this.handleChangeApp_secret}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"user_token\">\r\n            User Acess Token\r\n            <input\r\n              type=\"text\"\r\n              id=\"user_token\"\r\n              value={this.state.user_access_token}\r\n              onChange={this.handleChangeToken}\r\n            />\r\n          </label>\r\n          <button>Submit</button>\r\n        </form>\r\n        {permanent_token !== \"\" ? (\r\n          <div className=\"response valide\">\r\n            Your permanent token is : <strong>{permanent_token}</strong>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport Form from \"./components/Form\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}